name: '&fOre Exposer'
lore:
- '&7&oItems from EI-PACKS 2 (9.99 euros)'
- '&7&oYou can purchase it on discord (Special70)'
- ''
- '&7Right-Click a block to expose ores'
- '&7in a very huge area. Visuals lasts for 30s.'
- '&f'
- '&c1 minute cooldown'
material: HEART_OF_THE_SEA
glow: true
disableStack: false
keepItemOnDeath: false
canBeUsedOnlyByTheOwner: false
storeItemInfo: false
unbreakable: false
usage: 0
usageLimit: -1
dropOptions:
  glowDrop: false
  glowDropColor: WHITE
  displayNameDrop: false
hiders:
  hideEnchantments: false
  hideUnbreakable: false
  hideAttributes: false
  hidePotionEffects: false
  hideUsage: true
enchantments: {}
giveFirstJoin:
  giveFirstJoin: false
  giveFirstJoinAmount: 1
  giveFirstJoinSlot: 0
restrictions: {}
cancelEventIfNoPerm: false
cancelEventIfNotOwner: false
disabledWorlds: []
variables:
  uuid:
    variableName: uuid
    type: STRING
    default: '0.0'
activators:
  activator0:
    name: '&eActivator'
    option: PLAYER_RIGHT_CLICK
    typeTarget: ONLY_BLOCK
    usageModification: 0
    cancelEvent: true
    silenceOutput: false
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 60
      isCooldownInTicks: false
      cooldownMsg: ''
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems:
      errorMessage: ''
    requiredExecutableItems:
      errorMessage: ''
    detailedSlots:
    - -1
    commands: []
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    detailedBlocks:
      blocks: []
      cancelEventIfNotValid: false
      messageIfNotValid: ''
    blockCommands: []
    blockConditions: {}
    variablesModification:
      varModif0:
        variableName: uuid
        type: SET
        modification: '%player_uuid%'
  activator1:
    name: '&eActivator'
    option: PLAYER_RIGHT_CLICK
    typeTarget: ONLY_BLOCK
    usageModification: 0
    cancelEvent: true
    silenceOutput: false
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 60
      isCooldownInTicks: false
      cooldownMsg: ''
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems:
      errorMessage: ''
    requiredExecutableItems:
      errorMessage: ''
    detailedSlots:
    - -1
    commands: []
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    detailedBlocks:
      blocks: []
      cancelEventIfNotValid: false
      messageIfNotValid: ''
    blockCommands:
    - MINEINCUBE 8
    - execute at %player% run playsound entity.player.levelup ambient %player%
    - 'LOOP START: 60'
    - execute in <<%block_world%>> run execute at @e[type=slime,tag=%var_uuid%] if
      block ~ ~ ~ air run tp @e[distance=..0.1] ~ -200 ~
    - DELAYTICK 10
    - LOOP END
    - execute in <<%block_world%>> run tp @e[type=slime,tag=%var_uuid%] ~ -200 ~
    blockConditions: {}
    variablesModification: {}
  activator2:
    name: '&eActivator'
    option: PLAYER_BLOCK_BREAK
    usageModification: 0
    cancelEvent: true
    silenceOutput: false
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems:
      errorMessage: ''
    requiredExecutableItems:
      errorMessage: ''
    detailedSlots:
    - -1
    commands:
    - execute at %player% run summon slime %block_x_int% %block_y%+0.25 %block_z_int%
      {HasVisualFire:0b,NoGravity:1b,Invulnerable:1b,Glowing:1b,NoAI:1b,Size:0,Tags:["%var_uuid%"],ActiveEffects:[{Id:14b,Amplifier:1b,Duration:30000,ShowParticles:0b}]}
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    detailedBlocks:
      blocks:
      - COAL_ORE
      - IRON_ORE
      - GOLD_ORE
      - REDSTONE_ORE
      - LAPIS_ORE
      - DIAMOND_ORE
      - EMERALD_ORE
      - DEEPSLATE_COAL_ORE
      - DEEPSLATE_IRON_ORE
      - DEEPSLATE_GOLD_ORE
      - DEEPSLATE_REDSTONE_ORE
      - DEEPSLATE_LAPIS_ORE
      - DEEPSLATE_DIAMOND_ORE
      - DEEPSLATE_EMERALD_ORE
      - NETHER_GOLD_ORE
      - NETHER_QUARTZ_ORE
      - ANCIENT_DEBRIS
      - COPPER_ORE
      - DEEPSLATE_COPPER_ORE
      cancelEventIfNotValid: true
      messageIfNotValid: ''
    blockCommands: []
    blockConditions: {}
    variablesModification: {}
recognitions: []
attributes: {}
config_5: true
config_update: true