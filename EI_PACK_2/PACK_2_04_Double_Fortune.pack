name: '&fDouble Fortune'
lore:
- '&7&oItems from EI-PACKS 2 (9.99 euros)'
- '&7&oYou can purchase it on discord (Special70)'
- ''
- '&75% chance for your block loot'
- '&7to be doubled when breaking ores'
- ''
- '&7The chance is increased by +1%'
- '&7for every level of fortune this'
- '&7pickaxe has'
material: DIAMOND_PICKAXE
glow: false
disableStack: false
keepItemOnDeath: false
canBeUsedOnlyByTheOwner: false
storeItemInfo: false
unbreakable: false
usage: 0
usageLimit: -1
durability: 1561
dropOptions:
  glowDrop: false
  glowDropColor: WHITE
  displayNameDrop: false
hiders:
  hideEnchantments: false
  hideUnbreakable: false
  hideAttributes: false
  hidePotionEffects: false
  hideUsage: false
enchantments: {}
giveFirstJoin:
  giveFirstJoin: false
  giveFirstJoinAmount: 1
  giveFirstJoinSlot: 0
restrictions: {}
cancelEventIfNoPerm: false
cancelEventIfNotOwner: false
disabledWorlds: []
variables: {}
activators:
  activator1:
    name: '&eActivator'
    option: PLAYER_BLOCK_BREAK
    usageModification: 0
    cancelEvent: false
    silenceOutput: false
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems:
      errorMessage: ''
    requiredExecutableItems:
      errorMessage: ''
    detailedSlots:
    - -1
    commands: []
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions:
      plchC1:
        type: PLAYER_NUMBER
        comparator: EQUALS
        part1: '%math_0_({player_item_in_hand_level_LOOT_BONUS_BLOCKS}+5)>={rng_5,100}%'
        part2: '1.0'
        cancelEventIfNotValid: false
        messageIfNotValid: '&e'
    detailedBlocks:
      blocks: []
      cancelEventIfNotValid: false
      messageIfNotValid: ''
    blockCommands:
    - DELAYTICK 1
    - SETBLOCK %block%
    - DELAYTICK 1
    - MINEINCUBE 0
    - DELAYTICK 2
    - SETBLOCK AIR
    blockConditions: {}
    variablesModification: {}
recognitions: []
attributes: {}
customModelData: 4
config_5: true
config_update: true