name: '&9Gray Fullbuster'
lore:
- '&7&oItems from EI-PACKS 1 (9.99 euros)'
- '&7&oYou can purchase it on discord (Special70)'
- ''
- '&fRight Click to dash through'
- '&ftargets for 9 damage while slowing'
- '&fthem down for 1 second.'
- '&f2 second cooldown'
- ''
- '&fShift Right Click to shoot'
- '&fa ray of ice in your direction,'
- '&fdealing 10 damage to targets and'
- '&fslowing them down for 1 second.'
- '&f3 second cooldown'
- ''
- '&fShift Left Click to damage nearby'
- '&ftargets for 15 damage and slowing them'
- '&fdown for 10 seconds.'
- '&f20 second cooldown'
- ''
- '&fHitting targets deal 8 damage and'
- '&f20% chance to slow them down for 5 seconds'
material: PLAYER_HEAD
glow: false
disableStack: false
keepItemOnDeath: false
canBeUsedOnlyByTheOwner: false
storeItemInfo: false
unbreakable: false
usage: 0
usageLimit: -1
dropOptions:
  glowDrop: false
  glowDropColor: WHITE
  displayNameDrop: false
hiders:
  hideEnchantments: false
  hideUnbreakable: false
  hideAttributes: false
  hidePotionEffects: false
  hideUsage: false
enchantments: {}
giveFirstJoin:
  giveFirstJoin: false
  giveFirstJoinAmount: 1
  giveFirstJoinSlot: 0
restrictions:
  cancel-item-place: true
cancelEventIfNoPerm: false
cancelEventIfNotOwner: false
disabledWorlds: []
variables: {}
activators:
  activator1:
    name: '&eActivator'
    option: PLAYER_RIGHT_CLICK
    typeTarget: NO_TYPE_TARGET
    usageModification: 0
    cancelEvent: false
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 2
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots:
    - -1
    commands:
    - execute at %player% run playsound block.redstone_torch.burnout ambient %player%
    - FRONTDASH 2 0.01
    - 'LOOP START: 10'
    - execute at %player% run particle firework ~ ~ ~ 0.1 0.1 0.1 0.2 20
    - AROUND 3 false DAMAGE 9
    - MOB_AROUND 3 true DAMAGE 9
    - AROUND 3 false effect give %around_target% slowness 1 4
    - MOB_AROUND 3 true effect give %around_uuid% slowness 1 4
    - execute at %player% run particle dust 0.01 1 1 1 ~ ~ ~ 1 1 1 0 20
    - DELAYTICK 2
    - LOOP END
    playerConditions:
      ifNotSneaking: true
      ifNotSneakingMsg: ''
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    variablesModification: {}
  activator2:
    name: '&eActivator'
    option: PLAYER_RIGHT_CLICK
    typeTarget: NO_TYPE_TARGET
    usageModification: 0
    cancelEvent: false
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 3
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots:
    - -1
    commands:
    - execute at %player% run playsound block.redstone_torch.burnout ambient %player%
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 1
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 2
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 3
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 4
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 5
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 6
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -1
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -2
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -3
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -4
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -5
    - LAUNCH FAIRYTAIL_GRAY_FULLBUSTER_1 -6
    playerConditions:
      ifSneaking: true
      ifSneakingMsg: ''
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    variablesModification: {}
  activator3:
    name: '&eActivator'
    option: PROJECTILE_HIT_ENTITY
    usageModification: 0
    cancelEvent: true
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots: []
    commands:
    - execute at %entity_uuid% run particle dust 0.01 1 1 1 ~ ~ ~ 1 1 1 0 20
    - effect give %entity_uuid% slowness 1 3
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    mustBeAProjectileLaunchWithTheSameEI: true
    detailedEntities: []
    entityCommands:
    - DAMAGE 10
    entityConditions:
      ifIsOnTheBlock: {}
      ifIsNotOnTheBlock: {}
      ifNotEntityType: []
    variablesModification: {}
  activator4:
    name: '&eActivator'
    option: PROJECTILE_HIT_PLAYER
    usageModification: 0
    cancelEvent: true
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots: []
    commands:
    - execute at %target% run particle dust 0.01 1 1 1 ~ ~ ~ 1 1 1 0 20
    - execute at %target% run playsound block.redstone_torch.burnout ambient %target%
    - effect give %target% slowness 1 3
    - effect give %target% mining_fatigue 1 3
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    mustBeAProjectileLaunchWithTheSameEI: true
    targetCommands: []
    targetConditions: {}
    variablesModification: {}
  activator5:
    name: '&eActivator'
    option: PLAYER_LEFT_CLICK
    typeTarget: NO_TYPE_TARGET
    usageModification: 0
    cancelEvent: false
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 20
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots:
    - -1
    commands:
    - execute at %player% run playsound block.redstone_torch.burnout ambient %player%
    - execute at %player% run particle dust 0.01 1 1 1 ~ ~0.1 ~ 6 0.1 6 0 500
    - AROUND 6 false DAMAGE 15
    - execute at %player% run effect give @e[name=!%player%,distance=..5] slowness
      10 2
    - MOB_AROUND 6 true DAMAGE 15
    playerConditions:
      ifSneaking: true
      ifSneakingMsg: ''
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    variablesModification: {}
  activator6:
    name: '&eActivator'
    option: PLAYER_CLICK_ON_ENTITY
    detailedClick: LEFT
    usageModification: 0
    cancelEvent: true
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots:
    - -1
    commands:
    - 'RANDOM RUN: 1'
    - NOTHING*4
    - effect give %entity_uuid% slowness 5 4 +++ execute at %entity_uuid% run particle
      dust 0.01 1 1 1 ~ ~0.1 ~ 6 0.1 6 0 500
    - RANDOM END
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    detailedEntities: []
    entityCommands:
    - DAMAGE 8
    entityConditions:
      ifIsOnTheBlock: {}
      ifIsNotOnTheBlock: {}
      ifNotEntityType: []
    variablesModification: {}
  activator7:
    name: '&eActivator'
    option: PLAYER_CLICK_ON_PLAYER
    detailedClick: LEFT
    usageModification: 0
    cancelEvent: true
    silenceOutput: true
    autoUpdateItem: false
    cooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: false
      cancelEventIfInCooldown: false
    globalCooldownOptions:
      cooldown: 0
      isCooldownInTicks: false
      cooldownMsg: '&cYou are in cooldown ! &7(&e%time_H%&6H &e%time_M%&6M &e%time_S%&6S&7)'
      displayCooldownMessage: true
      cancelEventIfInCooldown: false
    otherEICooldowns: {}
    requiredItems: {}
    requiredExecutableItems: {}
    detailedSlots:
    - -1
    commands:
    - 'RANDOM RUN: 1'
    - NOTHING*4
    - effect give %target% slowness 5 4 +++ execute at %target% run particle dust
      0.01 1 1 1 ~ ~0.1 ~ 6 0.1 6 0 500
    - RANDOM END
    playerConditions: {}
    worldConditions: {}
    itemConditions: {}
    customConditions: {}
    placeholdersConditions: {}
    targetCommands:
    - DAMAGE 8
    targetConditions: {}
    variablesModification: {}
recognitions: []
headValue: eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDcyMzBmYTEwZjc3YzE0YWI4OGY5ZDk4MGVkNzAxZGM2NjBhNGRmOGRiOGM0MzNlZWZhZjNjMDgzMzA4YzM1OSJ9fX0=
headDBID: ''
attributes: {}
config_5: true
config_update: true